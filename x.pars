/* Project:  Compiler for language x
 * Descr:    LR parser for language x
 * Kind:     Parser specification
 */

SCANNER x_scan

PARSER  x_pars

GLOBAL {
#include <stdio.h>
#include "rString.h"
}

PREC LEFT '||'
     LEFT '&&'
     LEFT '+' '-'
     LEFT '*' '/'
     NONE UNARY '~'


RULE

program = metainfo vardeclarationblock executionblock .

metainfo = PROG identifier '.' .

/* variable declarations */
vardeclarationblock = VAR vardeclarationlist END_VAR .

vardeclarationlist = <
	= vardeclaration vardeclarationlist .
	= . // epsilon
> .

vardeclaration = varinout vartype identifier '.' .

varinout = <
	= . // epsilon
	= '?' .
	= '!' .
	= '?!' .
> .

vartype = <
	= int .
	= string .
	= float .
> .

/* executionblock */
executionblock = EXEC statementlist END_EXEC .

statementlist = <
	= statement statementlist .
	= . // epsilon
> .

statement = <
	= statementblock .
	= identifier assignop numberexpr '.' .
	= identifier '=' stringexpr '.' .
	= ifthenelse_stmt .
	= for_stmt .
	= while_stmt .
> .

statementblock = begin statementlist end .

assignop = <
	= '=' .
	= '+=' .
	= '-=' .
	= '*=' .
	= '/=' .
> .

ifthenelse_stmt = if condition then statementlist else_o endif .

else_o = <
	= else statementlist .
	= elif condition then statementlist else_o .
	= . // epsilon
> .

for_stmt = for identifier '=' numberexpr '.' condition '.' identifier assignop numberexpr do statementlist endfor .

while_stmt = while condition do statementlist endwhile .

numberexpr = <
	= int_const .
	= float_const .
	= identifier .
	= numberexpr '+' numberexpr .
	= numberexpr '-' numberexpr .
	= numberexpr '*' numberexpr .
	= numberexpr '/' numberexpr .
	= '-' numberexpr PREC UNARY .
	= '(' numberexpr ')' .
> .

condition = <
	= numberexpr '==' numberexpr .
	= numberexpr '~=' numberexpr .
	= numberexpr '<' numberexpr .
	= numberexpr '>' numberexpr .
	= numberexpr '<=' numberexpr .
	= numberexpr '>=' numberexpr .
	= condition '&&' condition .
	= condition '||' condition .
	= '~' condition .
	= '(' condition ')' .
> .

stringexpr = <
	= string_const .
	= identifier .
	= stringexpr '+' stringexpr .
> .

/* Tokens */
int_const:    [Value: long]       {Value := 0;        } .
float_const:  [Value: double]     {Value := 0.0;      } .
string_const: [Value: tStringRef] {Value := NoString; } .
identifier:   [Ident: tIdent] 	  {Ident := NoIdent;  } .
