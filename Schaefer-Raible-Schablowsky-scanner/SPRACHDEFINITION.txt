program ::= metainfo vardeclarationblock executionblock .

metainfo ::= 'PROG ' identifier '.' .

vardeclarationblock ::= 'VAR' { vardeclaration } 'END_VAR' .
vardeclaration ::= ['?'] ['!'] vartype identifier '.' .
vartype ::= 'int' | 'string' | 'float' .

executionblock ::= 'EXEC' { statement | comment } 'END_EXEC' .

comment ::= '/*' { ascii } '*/' .

statement ::= statementblock | identifier assignop numberexpr '.' | identifier '=' stringexpr '.' | ifthenelse | for | while .
statementblock ::= 'begin' { statement } 'end' .

assignop ::= '=' | '+=' | '-=' | '*=' | '/=' .

ifthenelse ::= 'if' condition 'then' { statement } [ 'else' { statement } ] 'endif' .  
for ::= 'for' identifier '=' numberexpr '.' condition '.' identifier assignop numberexpr 'do' { statement } 'endfor' .
while ::= 'while' condition 'do' { statement } 'endwhile' .

numberexpr ::= intconst | floatconst | identifier | '(' numberexpr '+' numberexpr ')' | '(' numberexpr '-' numberexpr ')' | '(' numberexpr '*' numberexpr ')' | '(' numberexpr '/' numberexpr ')' | '(' '-' numberexpr ')' .
condition ::= '(' numberexpr '==' numberexpr ')' | '(' numberexpr '~=' numberexpr ')' | '(' numberexpr '<' numberexpr ')' | '(' numberexpr '>' numberexpr ')' | '(' numberexpr '<=' numberexpr ')' | '(' numberexpr '>=' numberexpr ')' | '(' condition '&&' condition ')' | '(' condition '||' condition ')' | '(' '~' condition ')' .

intconst ::= digit {digit} .
floatconst ::= intconst | intconst '.' intconst .

stringexpr ::= stringconst | identifier | stringexpr '+' stringexpr .
stringconst ::= '"' { ascii } '"' .

identifier ::= letter { ledi } .

ledi ::= letter | digit .

letter ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' .
digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .

ascii ::= all ascii characters, special characters are escaped with backslash