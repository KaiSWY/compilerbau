/* Project:  COCKTAIL training
 * Descr:    Abstract Syntax Tree for an language x
 * Kind:     AST specification
 */
MODULE abstract_syntax

TREE   Tree

IMPORT {
  #include "Idents.h"
  
  typedef enum {
    eq,
    neq,
    lt,
    gt,
    let,
    get
  } eCondExprOp;
} // IMPORT

EXPORT {
} // EXPORT

GLOBAL {
} // GLOBAL

BEGIN {
} // BEGIN

CLOSE {
} // CLOSE

PROPERTY INPUT  /* all attributes are parameters of the generate the mXX() routines */

RULE  /* Here we define the node types */

PROGRAM =
  Name: name
  Vars: VAR_DEC
  Body: STMTS
  .

VAR_DEC = <
  no_var_dec = .
  var_dec = Next: VAR_DEC REV
            IO: VARINOUT
            Type: TYPE
            Var: name .
> .

VARINOUT = 
  [IsInput: int]
  [IsOutput: int] .

TYPE = <
  int_type = .
  float_type = .
  string_type = .
> .

STMTS = <
  no_stmt = .
  stmts = Next: STMTS REV
          Stmt: STMT .
> .

STMT = <
  be_stmt = Body: STMTS .
  assign_stmt = [Op: char]
                Var: name
                Rhs: EXPR .
  if_stmt = Cond: COND
            Then: STMTS
            Else: STMTS .
  for_stmt =  Pre: assign_stmt
              Cond: COND
              Post: assign_stmt
              Body: STMTS .
  while_stmt =  Cond: COND
                Body: STMTS .
> .

EXPR = <
  int_const: [Value: long] .
  float_const: [Value: double] .
  string_const: [Value: tStringRef] .
  name: [Ident: tIdent] .
  unary_expr: [Op: char]
              Arg: EXPR .
  binary_expr:  [Op: char]
                Left: EXPR
                Right: EXPR .
> .

COND = <
  bin_expr_cond = [Op: eCondExprOp]
                  Left: EXPR
                  Right: EXPR .
  bin_cond =  [Op: char]
              Left: COND
              Right: COND .
  unary_cond =  [Op: char]
                Arg: COND .
> .

END abstract_syntax
