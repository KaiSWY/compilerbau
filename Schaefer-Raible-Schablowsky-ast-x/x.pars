/* Project:  Compiler for language x
 * Descr:    LR parser for language x
 * Kind:     Parser specification
 */

SCANNER x_scan

PARSER  x_pars

GLOBAL {
	#include <stdio.h>
	#include "rString.h"
	#include "Tree.h"
	
	static tTree setNextVarDec(tTree varDec, tTree next) {
		varDec->var_dec.Next = next;
		return varDec;
	}
	
	static tTree setNextSTMT(tTree stmt, tTree next) {
		stmt->STMT.Next = next;
		return stmt;
	}
}

PREC LEFT '||'
     LEFT '&&'
     LEFT '+' '-'
     LEFT '*' '/'
     NONE UNARY '~'


RULE

root = p:program 
	 {=> {TreeRoot = p:tree;};} .

program = m:metainfo v:vardeclarationblock e:executionblock
		{tree := mPROGRAM(m:Position, m:tree, v:tree, e:tree);} .

metainfo = p:PROG i:identifier '.' 
		 {tree := mname(i:Position, i:Ident); Position := p:Position;} .

/* variable declarations */
vardeclarationblock = VAR v:vardeclarationlist END_VAR
					{tree := v:tree;} .

vardeclarationlist = <
	= h:vardeclaration t:vardeclarationlist 
	{tree := setNextVarDec(h:tree, t:tree);}.
	= // epsilon
	{tree := mno_var_dec();} . 
> .

vardeclaration = v:varinout t:vartype i:identifier '.'
			   {tree := mvar_dec(t:Position, NoTree, v:tree, t:tree, mname(i:Position, i:Ident));} .

varinout = <
	= // epsilon
	{tree := mVARINOUT(NoPosition, 0, 0);} . 
	= c:'?'
	{tree := mVARINOUT(c:Position, 1, 0);} .
	= c:'!'
	{tree := mVARINOUT(c:Position, 0, 1);} .
	= c:'?!'
	{tree := mVARINOUT(c:Position, 1, 1);} .
> .

vartype = <
	= i:int
	{tree := mint_type(i:Position);} .
	= s:string
	{tree := mstring_type(s:Position);} .
	= f:float
	{tree := mfloat_type(f:Position);} .
> .

/* executionblock */
executionblock = e:EXEC s:statementlist END_EXEC 
			   {tree := s:tree;} .

statementlist = <
	= h:statement t:statementlist
	{tree := setNextSTMT(h:tree, t:tree);} .
	= // epsilon
	{tree := mno_stmt();} .
> .

statement = <
	= s:statementblock 
	{tree := s:tree;}.
	= i:identifier a:assignop e:expr '.'
	{tree := massign_stmt(a:Position, NoTree, a:op, mname(i:Position, i:Ident), e:tree);} .
	= i:ifthenelse_stmt
	{tree := i:tree;} .
	= f:for_stmt
	{tree := f:tree;} .
	= w:while_stmt
	{tree := w:tree;} .
> .

statementblock = b:begin s:statementlist end
			   {tree := s:tree;} .

assignop = <
	= o:'=' 
	{op := '='; Position := o:Position;} .
	= o:'+='
	{op := '+'; Position := o:Position;} .
	= o:'-='
	{op := '-'; Position := o:Position;} .
	= o:'*='
	{op := '*'; Position := o:Position;} .
	= o:'/='
	{op := '/'; Position := o:Position;} .
> .

ifthenelse_stmt = i:if c:condition then t:statementlist e:else_o endif
				{tree := mif_stmt(i:Position, NoTree, c:tree, t:tree, e:tree);} .

else_o = <
	= else s:statementlist
	{tree := s:tree;} .
	= i:elif c:condition then t:statementlist e:else_o
	{tree := mif_stmt(i:Position, NoTree, c:tree, t:tree, e:tree);} .
	= // epsilon
	{tree := mno_stmt();} .
> .

for_stmt = f:for i1:identifier '=' e1:expr '.' c:condition '.' i2:identifier o:assignop e2:expr do s:statementlist endfor 
		 {tree := { 
				tTree assign1 = massign_stmt('=':Position, mno_stmt(), '=', mname(i1:Position, i1:Ident), e1:tree);
				tTree assign2 = massign_stmt(o:Position, mno_stmt(), o:op, mname(i2:Position, i2:Ident), e2:tree);
				tree = mfor_stmt(f:Position, NoTree, assign1, c:tree, assign2, s:tree);
			};} .

while_stmt = w:while c:condition do s:statementlist endwhile
		   {tree := mwhile_stmt(w:Position, NoTree, c:tree, s:tree);} .

expr = <
	= i:int_const 
	{tree := mint_const(i:Position, i:Value);} .
	= f:float_const
	{tree := mfloat_const(f:Position, f:Value);} .
	= s:string_const
	{tree := mstring_const(s:Position, s:Value);} .
	= i:identifier
	{tree := mname(i:Position, i:Ident);} .
	= l:expr '+' r:expr
	{tree := mbinary_expr('+':Position, '+', l:tree, r:tree);} .
	= l:expr '-' r:expr
	{tree := mbinary_expr('-':Position, '-', l:tree, r:tree);} .
	= l:expr '*' r:expr
	{tree := mbinary_expr('*':Position, '*', l:tree, r:tree);} .
	= l:expr '/' r:expr
	{tree := mbinary_expr('/':Position, '/', l:tree, r:tree);} .
	= '-' e:expr PREC UNARY
	{tree := munary_expr('-':Position, '-', e:tree);} .
	= '(' e:expr ')'
	{tree := e:tree;} .
> .

condition = <
	= l:expr o:'==' r:expr
	{tree := mbin_expr_cond(o:Position, eq, l:tree, r:tree);} .
	= l:expr o:'~=' r:expr
	{tree := mbin_expr_cond(o:Position, neq, l:tree, r:tree);} .
	= l:expr o:'<' r:expr
	{tree := mbin_expr_cond(o:Position, lt, l:tree, r:tree);} .
	= l:expr o:'>' r:expr
	{tree := mbin_expr_cond(o:Position, gt, l:tree, r:tree);} .
	= l:expr o:'<=' r:expr
	{tree := mbin_expr_cond(o:Position, let, l:tree, r:tree);} .
	= l:expr o:'>=' r:expr
	{tree := mbin_expr_cond(o:Position, get, l:tree, r:tree);} .
	= l:condition o:'&&' r:condition
	{tree := mbin_cond(o:Position, '&', l:tree, r:tree);} .
	= l:condition o:'||' r:condition
	{tree := mbin_cond(o:Position, '|', l:tree, r:tree);} .
	= o:'~' c:condition
	{tree := munary_cond(o:Position, '~', c:tree);} .
	= '(' c:condition ')'
	{tree := c:tree;} .
> .

/* Tokens */
int_const:    [Value: long]       {Value := 0;        } .
float_const:  [Value: double]     {Value := 0.0;      } .
string_const: [Value: tStringRef] {Value := NoString; } .
identifier:   [Ident: tIdent] 	  {Ident := NoIdent;  } .

/* Attributes */
MODULE attributes
PROPERTY SYN
DECLARE
 program
 vardeclarationblock
 vardeclarationlist
 vardeclaration
 varinout
 executionblock
 statementlist
 statement
 statementblock
 ifthenelse_stmt
 else_o
 for_stmt
 while_stmt
 expr
 condition = [tree: tTree].
 
 metainfo = [tree: tTree] [Position: tPosition].
 
 assignop = [op: char] [Position: tPosition].
 
 vartype = [tree: tTree] [Position: tPosition].
END attributes
